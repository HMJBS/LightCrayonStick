
VLC_2_color_id.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  00000234  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000107  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009e  00000000  00000000  00000393  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000105  00000000  00000000  00000431  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000005c  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000158  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000007d  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000769  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1f c0       	rjmp	.+62     	; 0x56 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a4 30       	cpi	r26, 0x04	; 4
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	4b d0       	rcall	.+150    	; 0xe8 <main>
  52:	b4 c0       	rjmp	.+360    	; 0x1bc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_11>:

int dat=0;			//割り込みに渡すシリアルデータ
int inx=0;			//ISR関数内の処理でdatの何番目のビットを転送したか
int portd_tmp=0;	//PORTDの一時退避

ISR(TIMER1_COMPA_vect){		//OCR1AがTimer1と一致時に呼び出す　33ms = 30hz
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	2f 93       	push	r18
  62:	3f 93       	push	r19
  64:	4f 93       	push	r20
  66:	5f 93       	push	r21
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
	
	if(inx<DATA_LONG){	//datを送信中なら
  6c:	80 91 00 01 	lds	r24, 0x0100
  70:	90 91 01 01 	lds	r25, 0x0101
  74:	86 30       	cpi	r24, 0x06	; 6
  76:	91 05       	cpc	r25, r1
  78:	cc f4       	brge	.+50     	; 0xac <__vector_11+0x56>
		switch(ID){	
			case 0:
			case 2:
			//ID=0: GREEN=ON,BLUE=OFF
				PORTD = (((dat>>(DATA_LONG-inx-1))&1)<<RED)+(1<<GREEN);	
  7a:	25 e0       	ldi	r18, 0x05	; 5
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	a9 01       	movw	r20, r18
  80:	48 1b       	sub	r20, r24
  82:	59 0b       	sbc	r21, r25
  84:	ca 01       	movw	r24, r20
  86:	20 91 02 01 	lds	r18, 0x0102
  8a:	30 91 03 01 	lds	r19, 0x0103
  8e:	a9 01       	movw	r20, r18
  90:	02 c0       	rjmp	.+4      	; 0x96 <__vector_11+0x40>
  92:	55 95       	asr	r21
  94:	47 95       	ror	r20
  96:	8a 95       	dec	r24
  98:	e2 f7       	brpl	.-8      	; 0x92 <__vector_11+0x3c>
  9a:	ca 01       	movw	r24, r20
  9c:	81 70       	andi	r24, 0x01	; 1
  9e:	82 95       	swap	r24
  a0:	88 0f       	add	r24, r24
  a2:	88 0f       	add	r24, r24
  a4:	80 7c       	andi	r24, 0xC0	; 192
  a6:	80 5e       	subi	r24, 0xE0	; 224
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__vector_11+0x5a>
	}else{				//datを送信終わっているなら
		switch(ID){
			case 0:
			case 2:
				//ID=0: GREEN=ON,BLUE=OFF
				PORTD=_BV(GREEN);
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	8b b9       	out	0x0b, r24	; 11
				break;
			default:
				break;
		}
	}
	inx++;
  b0:	80 91 00 01 	lds	r24, 0x0100
  b4:	90 91 01 01 	lds	r25, 0x0101
  b8:	01 96       	adiw	r24, 0x01	; 1
	if(inx>DATA_SECTION) inx=0;		
  ba:	81 31       	cpi	r24, 0x11	; 17
  bc:	91 05       	cpc	r25, r1
  be:	2c f4       	brge	.+10     	; 0xca <__vector_11+0x74>
				break;
			default:
				break;
		}
	}
	inx++;
  c0:	90 93 01 01 	sts	0x0101, r25
  c4:	80 93 00 01 	sts	0x0100, r24
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <__vector_11+0x7c>
	if(inx>DATA_SECTION) inx=0;		
  ca:	10 92 01 01 	sts	0x0101, r1
  ce:	10 92 00 01 	sts	0x0100, r1
	
	
}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	5f 91       	pop	r21
  d8:	4f 91       	pop	r20
  da:	3f 91       	pop	r19
  dc:	2f 91       	pop	r18
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:
int main(void)
{
	int ad1,ad2;
	DDRB=_BV(PD1);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	84 b9       	out	0x04, r24	; 4
	DDRC=0;
  ec:	17 b8       	out	0x07, r1	; 7
	DDRD=_BV(PD5) | _BV(PD6);
  ee:	90 e6       	ldi	r25, 0x60	; 96
  f0:	9a b9       	out	0x0a, r25	; 10
	ADCSRA=0B10000110; //CK/64
  f2:	96 e8       	ldi	r25, 0x86	; 134
  f4:	90 93 7a 00 	sts	0x007A, r25
	TCCR1A=0;
  f8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=_BV(WGM12) | _BV(CS12);	//CTC,分周比256
  fc:	9c e0       	ldi	r25, 0x0C	; 12
  fe:	90 93 81 00 	sts	0x0081, r25
	TIMSK1=_BV(OCIE1A);				//OCR1Aを比較対象として設定
 102:	80 93 6f 00 	sts	0x006F, r24
	OCR1A=640;						//about 33.3ms at 4.9152Mhz(ExtOsc)
 106:	80 e8       	ldi	r24, 0x80	; 128
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	90 93 89 00 	sts	0x0089, r25
 10e:	80 93 88 00 	sts	0x0088, r24
	//OCR1A=1041;						//for 8MHz internal Osc
	sei();
 112:	78 94       	sei
	
	if(ID==0){
		PORTB=0;						//ID=0:青LEDOFF
 114:	15 b8       	out	0x05, r1	; 5
		PORTB=_BV(BLUE);			//ID=1,2:青LEDON
	}
	while(1){

		
		ADMUX=0B01100000;
 116:	cc e7       	ldi	r28, 0x7C	; 124
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	0f 2e       	mov	r0, r31
 11c:	f0 e6       	ldi	r31, 0x60	; 96
 11e:	df 2e       	mov	r13, r31
 120:	f0 2d       	mov	r31, r0
		//AVCCが基準電圧Vref=2.56V Left Adjust ADC0(PC0) ;
		ADCSRA |= 1<<ADSC; //AD start
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
		while(!(ADCSRA & (1<<ADIF))){}
		//ADCSRのビット4(ADIF)が1になるまで待つ
		ad1=ADCH;
 126:	a9 e7       	ldi	r26, 0x79	; 121
 128:	b0 e0       	ldi	r27, 0x00	; 0
		ADMUX=0B01100001;
 12a:	0f 2e       	mov	r0, r31
 12c:	f1 e6       	ldi	r31, 0x61	; 97
 12e:	ef 2e       	mov	r14, r31
 130:	f0 2d       	mov	r31, r0
			
		}
		else{		//Ｎ状態　未完	col=0
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(0<<1)+0;	//parity=0
 132:	40 e2       	ldi	r20, 0x20	; 32
 134:	50 e0       	ldi	r21, 0x00	; 0
		}
		
		else if((ad2<55) && (ad2>=0)){		//左状態 col=3
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(3<<1)+0;	//parity=0
 136:	0f 2e       	mov	r0, r31
 138:	f6 e2       	ldi	r31, 0x26	; 38
 13a:	af 2e       	mov	r10, r31
 13c:	b1 2c       	mov	r11, r1
 13e:	f0 2d       	mov	r31, r0

		}
		else if((ad2<=255) && (ad2>200)){		//右状態 col=1
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(1<<1)+1;	//parity=1
 140:	63 e2       	ldi	r22, 0x23	; 35
 142:	70 e0       	ldi	r23, 0x00	; 0
		
		
		if((ad1<=255) && (ad1>200)){		//下状態 col=2
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(2<<1)+1;	//parity=1
 144:	25 e2       	ldi	r18, 0x25	; 37
 146:	30 e0       	ldi	r19, 0x00	; 0
		PORTB=_BV(BLUE);			//ID=1,2:青LEDON
	}
	while(1){

		
		ADMUX=0B01100000;
 148:	d8 82       	st	Y, r13
		//AVCCが基準電圧Vref=2.56V Left Adjust ADC0(PC0) ;
		ADCSRA |= 1<<ADSC; //AD start
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
		while(!(ADCSRA & (1<<ADIF))){}
 150:	80 81       	ld	r24, Z
 152:	84 ff       	sbrs	r24, 4
 154:	fd cf       	rjmp	.-6      	; 0x150 <main+0x68>
		//ADCSRのビット4(ADIF)が1になるまで待つ
		ad1=ADCH;
 156:	1c 91       	ld	r17, X
		ADMUX=0B01100001;
 158:	e8 82       	st	Y, r14
		//AVCCが基準電圧Vref=2.56V Left Adjust ADC0(PC0)
		ADCSRA |= 1<<ADSC; //AD start
 15a:	80 81       	ld	r24, Z
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	80 83       	st	Z, r24
		while(!(ADCSRA & (1<<ADIF))){}
 160:	80 81       	ld	r24, Z
 162:	84 ff       	sbrs	r24, 4
 164:	fd cf       	rjmp	.-6      	; 0x160 <main+0x78>
		//ADCSRのビット4(ADIF)が1になるまで待つ
		ad2=ADCH;
 166:	cc 90       	ld	r12, X
		
		
		//ユーザ1（01--）
		
		
		if((ad1<=255) && (ad1>200)){		//下状態 col=2
 168:	81 2f       	mov	r24, r17
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	89 5c       	subi	r24, 0xC9	; 201
 16e:	91 09       	sbc	r25, r1
 170:	c7 97       	sbiw	r24, 0x37	; 55
 172:	28 f4       	brcc	.+10     	; 0x17e <main+0x96>
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(2<<1)+1;	//parity=1
 174:	30 93 03 01 	sts	0x0103, r19
 178:	20 93 02 01 	sts	0x0102, r18
 17c:	e5 cf       	rjmp	.-54     	; 0x148 <main+0x60>
				dat=(1<<5)+(ID<<3)+(2<<1)+0;	//parity=0
			}

			
		}
		else if ((ad1<55) && (ad1>=0)){		//上状態 col=0
 17e:	17 33       	cpi	r17, 0x37	; 55
 180:	28 f4       	brcc	.+10     	; 0x18c <main+0xa4>
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(0<<1)+0;	//parity=0
 182:	50 93 03 01 	sts	0x0103, r21
 186:	40 93 02 01 	sts	0x0102, r20
 18a:	de cf       	rjmp	.-68     	; 0x148 <main+0x60>
			}else{
				dat=(1<<5)+(ID<<3)+(0<<1)+1;	//parity=1
			}

		}
		else if((ad2<=255) && (ad2>200)){		//右状態 col=1
 18c:	8c 2d       	mov	r24, r12
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	89 5c       	subi	r24, 0xC9	; 201
 192:	91 09       	sbc	r25, r1
 194:	c7 97       	sbiw	r24, 0x37	; 55
 196:	28 f4       	brcc	.+10     	; 0x1a2 <main+0xba>
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(1<<1)+1;	//parity=1
 198:	70 93 03 01 	sts	0x0103, r23
 19c:	60 93 02 01 	sts	0x0102, r22
 1a0:	d3 cf       	rjmp	.-90     	; 0x148 <main+0x60>
				dat=(1<<5)+(ID<<3)+(1<<1)+0;	//parity=0
			}

		}
		
		else if((ad2<55) && (ad2>=0)){		//左状態 col=3
 1a2:	86 e3       	ldi	r24, 0x36	; 54
 1a4:	8c 15       	cp	r24, r12
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <main+0xca>
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(3<<1)+0;	//parity=0
 1a8:	b0 92 03 01 	sts	0x0103, r11
 1ac:	a0 92 02 01 	sts	0x0102, r10
 1b0:	cb cf       	rjmp	.-106    	; 0x148 <main+0x60>
			
		}
		else{		//Ｎ状態　未完	col=0
			
			if((ID==0)||(ID==3)){
				dat=(1<<5)+(ID<<3)+(0<<1)+0;	//parity=0
 1b2:	50 93 03 01 	sts	0x0103, r21
 1b6:	40 93 02 01 	sts	0x0102, r20
 1ba:	c6 cf       	rjmp	.-116    	; 0x148 <main+0x60>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
